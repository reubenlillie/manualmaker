<?php
/**
 * Defines functions that are hooked into template files
 *
 * All actions and filter hooks are called via `includes/mm-public.php`.
 * This way actual callback "events" (i.e, `add_action` and `add_filter`)
 * and function "definitons" (in this file) can be managed separately.
 *
 * When using one of the hooks (i.e., `do_action` or `apply_filters`),
 * be sure to note the addition and priority from `includes/mm-public.php`
 * in that hooks' comment block with the `@hooked` tag.
 * This makes it easier to keep track of when hooks are used,
 * and it helps developers decide how best to use additional hooks.
 *
 * @link https://github.com/reubenlillie/manualmaker/
 *
 * @package ManualMaker
 * @subpackage ManualMaker\public
 * @since 0.1.0
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

# ======= Content Wrappers ======= #

/**
 * Opens the wrapping div tags on 'paragraph' pages.
 *
 * @since 0.1.0
 */
if ( ! function_exists( 'action_mm_site_content_wrapper_open' ) ) {

	function action_mm_site_content_wrapper_open( $args ) {

		$defaults = array(
			'inner_class'   => 'site-main',
			'inner_id'      => 'main',
			'inner_role'    => 'main',
			'inner_tag'     => 'main',
			'inner_wrapper' => TRUE,
			'outer_class'   => 'content-area',
			'outer_id'      => 'primary',
			'outer_role'    => '',
			'outer_tag'     => 'div',
			'outer_wrapper' => TRUE,
		);

		// Parse incoming $args into an array and merge it with $defaults
		$args = wp_parse_args( $args, $defaults );

		$inner_wrapper = sprintf( '<%s id="%s" class="%s" role="%s">',
							esc_attr( $args['inner_tag'] ),
							esc_attr( $args['inner_id'] ),
							esc_attr( $args['inner_class'] ),
							esc_attr( $args['inner_role'] )
						);

		$outer_wrapper = sprintf( '<%s id="%s" class="%s" role="%s">',
							esc_attr( $args['outer_tag'] ),
							esc_attr( $args['outer_id'] ),
							esc_attr( $args['outer_class'] ),
							esc_attr( $args['outer_role'] )
						);

		/**
		 * Runs before the opening outer content wrapper HTML tag.
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_before_mm_site_content_wrapper_outer_open' );

		if ( ! $args['outer_wrapper'] ) {
			return $outer_wrapper;
		} else {
			echo $outer_wrapper;
		} // else

			/**
			 * Runs after the opening outer content wrapper HTML tag.
			 *
			 * @since 0.1.0
			 */
			do_action( 'do_after_mm_site_content_wrapper_outer_open' );

			/**
			 * Runs before the opening inner content wrapper HTML tag.
			 *
			 * @since 0.1.0
			 */
			do_action( 'do_before_mm_site_content_wrapper_inner_open' );

			if ( ! $args['inner_wrapper'] ) {
				return $inner_wrapper;
			} else {
				echo $inner_wrapper;
			} // else

				/**
				 * Runs after the opening inner content wrapper HTML tag.
				 *
				 * @since 0.1.0
				 */
				do_action( 'do_after_mm_site_content_wrapper_inner_open' );

	} // action_mm_site_content_wrapper_open()

} // if ( ! function_exists() )

/**
 * Closes the wrapping div tags on 'paragraph' pages.
 *
 * @since 0.1.0
 */
if ( ! function_exists( 'action_mm_site_content_wrapper_close' ) ) {

	function action_mm_site_content_wrapper_close( $args ) {

		$defaults = array(
			'inner_class'   => 'site-main',
			'inner_tag'     => 'main',
			'inner_wrapper' => TRUE,
			'outer_class'   => 'content-area',
			'outer_tag'     => 'div',
			'outer_wrapper' => TRUE,
		);

		// Parse incoming $args into an array and merge it with $defaults
		$args = wp_parse_args( $args, $defaults );

		$inner_wrapper = sprintf( '</%s><!-- ."%s" -->',
							esc_attr( $args['inner_tag'] ),
							esc_attr( $args['inner_class'] )
						);

		$outer_wrapper = sprintf( '</%s><!-- ."%s" -->',
							esc_attr( $args['outer_tag'] ),
							esc_attr( $args['outer_class'] )
						);
				/**
				 * Runs before the closing content wrapper HTML tag.
				 *
				 * @since 0.1.0
				 *
				 * @hooked action_mm_sidebar - 10
				 */
				do_action( 'do_before_mm_site_content_wrapper_inner_close' );

			if ( ! $args['inner_wrapper'] ) {
				return $inner_wrapper;
			} else {
				echo $inner_wrapper;
			} // else

			/**
			 * Runs after the closing content wrapper HTML tag.
			 *
			 * @since 0.1.0
			 */
			do_action( 'do_after_mm_site_content_wrapper_inner_close' );

			/**
			 * Runs before the closing content wrapper HTML tag.
			 *
			 * @since 0.1.0
			 */
			do_action( 'do_before_mm_site_content_wrapper_outer_close' );

		if ( ! $args['outer_wrapper'] ) {
			return $outer_wrapper;
		} else {
			echo $outer_wrapper;
		} // else

		/**
		 * Runs after the closing content wrapper HTML tag.
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_after_mm_site_content_wrapper_outer_close' );

	} // action_mm_site_content_wrapper_close()

} // if ( ! function_exists() )

# ======= Content Headers ======== #

/**
 * Adds a content header on single 'paragraph' pages.
 *
 * @since 0.1.0
 */
if ( ! function_exists( 'action_mm_paragraph_header_content' ) ) {

	function action_mm_paragraph_header_content( $args ) {

		/**
		 * The CSS class for the content header tag.
		 *
		 * @since 0.1.0
		 *
		 * @var string $main_class
		 */
		$header_class = 'entry-title';

		/**
		 * Runs before the opening header tag.
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_before_mm_paragraph_header_content_open' );

		echo '<header class=' . esc_attr( $header_class ) . '>';

				/**
				 * Runs after the opening header tag.
				 *
				 * @since 0.1.0
				 *
				 * @hooked action_mm_paragraph_title_markup - 10
				 */
				do_action( 'do_after_mm_paragraph_header_content_open' );

				/**
				 * Runs before the closing header tag.
				 *
				 * @since 0.1.0
				 */
				do_action( 'do_before_mm_paragraph_header_content_close' );

		echo '</header><!-- .' . esc_attr( $header_class ) . '-->';

		/**
		 * Runs after the closing header tag.
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_after_mm_paragraph_header_content_close' );

		/**
		 * Allows plugins and themes to override the default content header.
		 *
		 * @since 0.1.0
		 *
		 * @link https://developer.wordpress.org/plugins/hooks/custom-hooks/
		 * @link https://make.wordpress.org/docs/plugin-developer-handbook/hooks/creating-custom-hooks/
		 */
		apply_filters(
			'apply_to_action_mm_paragraph_header_content',
			$header_class
		);

	} // action_mm_paragraph_header_content()

} // if ( ! function_exists() )

/**
 * Adds the paragraph title to the markup.
 *
 * Adds a permalink for the title on archive and taxonomy pages,
 * but only adds the title text on single 'paragraph' pages.
 *
 * @since 0.1.0
 *
 * @see the_title()
 * @link https://developer.wordpress.org/reference/functions/the_title/
 */
function action_mm_paragraph_title_markup() {

	/**
	 * Runs before inserting the paragraph title.
	 *
	 * @since 0.1.0
	 *
	 * @hooked 'action_mm_paragraph_navigation' - 10
	 */
	do_action( 'do_before_mm_the_paragraph_title' );

	if ( is_post_type_archive( 'paragraph' )
		|| is_tax( array( 'section', 'index_locator' ) )
		|| is_search()
	) {

			the_title( sprintf(
				'<h2 class="entry-title"><a href="%s" rel="bookmark">',
				esc_url( get_permalink() ) ),
				'</a></h2>'
			);
	} elseif ( is_single() ) {

		the_title( '<h1 class="entry-title">', '</h1>' );

	}

	/**
	 * Runs after inserting the paragraph title.
	 *
	 * @since 0.1.0
	 */
	do_action( 'do_after_mm_the_paragraph_title' );

} // action_mm_paragraph_title_markup()

/**
 * Inserts a content header on archive and taxonomy pages.
 *
 * @since 0.1.0
 */
if ( ! function_exists( 'action_mm_archive_header_content' ) ) {

	function action_mm_archive_header_content( $header_class ) {

		/**
		 * Runs before the opening header tag.
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_before_mm_archive_header_content_open' );

		echo '<header class=' . esc_attr( $header_class ) . '>';

				/**
				 * Runs after the opening header tag.
				 *
				 * @since 0.1.0
				 *
				 * @hooked action_mm_archive_title_markup - 10
				 */
				do_action( 'do_after_mm_archive_header_content_open' );

				/**
				 * Runs before the closing header tag.
				 *
				 * @since 0.1.0
				 */
				do_action( 'do_before_mm_archive_header_content_close' );

		echo '</header><!-- .' . esc_attr( $header_class ) . '-->';

		/**
		 * Runs after the closing header tag.
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_after_mm_archive_header_content_close' );

		/**
		 * Allows plugins and themes to override the default content header.
		 *
		 * @since 0.1.0
		 *
		 * @link https://developer.wordpress.org/plugins/hooks/custom-hooks/
		 * @link https://make.wordpress.org/docs/plugin-developer-handbook/hooks/creating-custom-hooks/
		 */
		apply_filters(
			'apply_to_action_mm_archive_header_content',
			$header_class
		);

	} // action_mm_paragraph_archive_header_content()

} // if ( ! function_exists() )

/**
 * Displays the archive title based on the queried object.
 *
 * Replaces WordPress' `the_archive_title()` for ManualMaker template files
 * so that the word **All** appears before the post type name
 * instead of **Archives:** when viewing the 'paragraph' post type archive.
 *
 * This should make more sense from a reader's point of view,
 * since ManualMaker's 'paragraph' archive page is basically like
 * reading the_ entire document_ made with ManualMaker
 * rather than an "archive" selected from a fewer number of such paragraphs.
 *
 * If you want something different than **All**
 * to display when viewing the 'paragraph' post type archive,
 * then you should make your own modified copy of this function.
 *
 * Otherwise, use `apply_to_mm_the_archive_title`
 * to append conditions for the `$title` variable to this function.
 *
 * @since 0.1.0
 *
 * @see is_post_type_archive()
 * @link https://developer.wordpress.org/reference/functions/is_post_type_archive/
 * @see get_the_archive_title()
 * @link https://developer.wordpress.org/reference/functions/get_the_archive_title/
 *
 * @link https://developer.wordpress.org/reference/functions/the_archive_title/
 *
 * @link https://developer.wordpress.org/reference/functions/add_filter/
 *
 * @param string $before Optional. Content to prepend to the description.
 *                                 Default empty.
 * @param string $after  Optional. Content to append to the description.
 *                                 Default empty.
 */
function mm_the_archive_title( $before = '', $after = '' ) {

	if ( is_post_type_archive( 'paragraph' ) ) {
			$title = str_replace(
				'Archives: ',
				// translators: 'paragraph' post type archive title
				_x( 'All ', 'manualmaker' ),
				get_the_archive_title()
			);

	} // if ( is_post_type_archive() )
	else {
		$title = get_the_archive_title();
	}

	/**
	 * Allows plugins and themes to add conditions for `$title` variable.
	 *
	 * @since 0.1.0
	 *
	 * @link https://developer.wordpress.org/plugins/hooks/custom-hooks/
	 * @link https://make.wordpress.org/docs/plugin-developer-handbook/hooks/creating-custom-hooks/
		 */
	apply_filters( 'apply_to_mm_the_archive_title', $title );

	if ( ! empty( $title ) ) {
		echo $before, $title, $after;
	}

} // mm_the_archive_title()

/**
 * Adds the archive title and description to the markup.
 *
 * @since 0.1.0
 *
 * @see mm_the_archive_title()
 *
 * @see the_archive_description()
 * @link https://developer.wordpress.org/reference/functions/the_archive_description/
 */
function action_mm_archive_title_markup() {

	/**
	 * Runs before inserting the archive title.
	 *
	 * @since 0.1.0
	 *
	 * @hooked 'action_mm_paragraphs_navigation' - 10
	 */
	do_action( 'do_before_mm_the_archive_title' );

	mm_the_archive_title( '<h1 class="page-title">', '</h1>' );

	/**
	 * Runs after inserting the archive title.
	 *
	 * @since 0.1.0
	 */
	do_action( 'do_after_mm_the_archive_title' );

	/**
	 * Runs before inserting the archive description.
	 *
	 * @since 0.1.0
	 */
	do_action( 'do_after_mm_the_archive_description' );

	the_archive_description();

	/**
	 * Runs after inserting the archive description.
	 *
	 * @since 0.1.0
	 */
	do_action( 'do_before_mm_the_archive_description' );

} // action_mm_archive_title_markup()

/**
 * Allows a theme to override ManualMaker's template parts.
 *
 * The WordPress Codex recommends this 'if' statement
 * for loading a template in a plugin,
 * while allowing themes to override that template.
 *
 * If you do override ManualMaker's default template with a theme,
 * you may use `get_template_part()` instead
 * within your theme's template file.
 *
 * @see load_template()
 * @link https://developer.wordpress.org/reference/functions/load_template/
 * @see locate_template()
 * @link https://developer.wordpress.org/reference/functions/locate_template/
 */
if ( ! function_exists( 'tag_mm_get_template_part' ) ) {

	function tag_mm_get_template_part( $template_file ) {

		if ( $overridden_template = locate_template(
			'manualmaker/template-parts/' . $template_file ) ) {
			/*
			 * If either the child theme or the parent theme
			 * has a file to override ManualMaker's template,
			 * then that theme's file path is loaded.
			 */
			load_template( $overridden_template );
		} else {
			/*
			 * Otherwise, ManualMaker's template file
			 * is loaded by default.
			 */
			include( plugin_dir_path( __FILE__ ) .
				'templates/template-parts/' . $template_file );
		}

	} // tag_mm_get_template_part()

} // if ( ! function_exists() )

/**
 * Displays the edit post link for 'paragraph' custom post type.
 *
 * @since 0.1.0
 *
 * @see edit_post_link()
 * @link https://developer.wordpress.org/reference/functions/edit_post_link/
 */
if ( ! function_exists ( 'action_mm_edit_post_link' ) ) {

	function action_mm_edit_post_link() {

		$footer_class = 'entry-footer';

		do_action( 'do_before_action_mm_edit_post_link' );

		edit_post_link(
			__( 'Edit', 'manualmaker' ),
			'<footer class="' . $footer_class . '">',
			'</footer><!-- .' . $footer_class . '-->'
		);

		/**
		 *
		 *
		 * @since 0.1.0
		 */
		apply_filters( 'apply_to_action_mm_edit_post_link', $footer_class );

		/**
		 *
		 *
		 * @since 0.1.0
		 */
		do_action( 'do_after_action_mm_edit_post_link' );

	} // action_mm_edit_post_link()

} // if ( ! function_exists() )

# ======= Sidebar ======= #

/**
 * Adds a sidebar.
 *
 * @since 0.1.0
 *
 * @see get_sidebar()
 * @link https://developer.wordpress.org/reference/functions/get_sidebar/
 *
 * @param callback $mm_sidebar The default sidebar.
 * @return callback A filtered sidebar, if applicable.
 */
if ( ! function_exists( 'action_mm_sidebar' ) ) {

	function action_mm_get_sidebar() {

		/**
		 * ManualMaker's default sidebar.
		 *
		 * @since 0.1.0
		 * @var callback $mm_sidebar
		 */
		$mm_sidebar = get_sidebar();

		/**
		 * Allows plugins and themes to override the  default sidebar variable.
		 *
		 * @since 0.1.0
		 *
		 * @link https://developer.wordpress.org/plugins/hooks/custom-hooks/
		 * @link https://make.wordpress.org/docs/plugin-developer-handbook/hooks/creating-custom-hooks/
		 */
		return apply_filters( 'apply_to_action_mm_sidebar', $mm_sidebar );

	} // action_mm_site_content_wrapper_close()

} // if ( ! function_exists() )

# ======= Previous/Next Navigation ======= #

// ------ Single pages ------ //

/**
 * Defines previous/next navigation for single pages.
 *
 * @since 0.1.0
 *
 * @see the_post_navigation()
 * @link https://developer.wordpress.org/reference/functions/the_post_navigation/
 *
 * @param callback $args The default array for `the_post_naviation()`.
 * @return callback A filtered array for `the_post_naviation()`, if applicable.
 */
if ( ! function_exists( 'action_mm_paragraph_navigation' ) ) {

	function action_mm_paragraph_navigation() {

		$args = the_post_navigation( array(
				'next_text' => '<span class="meta-nav" aria-hidden="true">' .
									__( 'Next', 'manualmaker' ) .
								'</span> ' .
								'<span class="screen-reader-text">' .
									__( 'Next post:', 'manualmaker' ) .
								'</span> ' .
								'<span class="post-title">%title</span>',
				'prev_text' => '<span class="meta-nav" aria-hidden="true">' .
									__( 'Previous', 'manualmaker' ) .
								'</span> ' .
								'<span class="screen-reader-text">' .
									__( 'Previous post:', 'manualmaker' ) .
								'</span> ' .
								'<span class="post-title">%title</span>',
			)
		);

		if ( is_single( 'paragraph' ) ) {

			/**
			 * Allows plugins and themes to override array parameters.
			 *
			 * @since 0.1.0
			 *
			 * @link https://developer.wordpress.org/plugins/hooks/custom-hooks/
			 * @link https://make.wordpress.org/docs/plugin-developer-handbook/hooks/creating-custom-hooks/
			 */
			return apply_filters( 'apply_to_action_mm_paragraph_navigation', $args );

		} // if

		else {
				return;
		}

	} // action_mm_paragraph_navigation()

} // if ( ! function_exists() )

// ------ Archive and Taxonomy pages ------ //

/**
 * Defines previous/next navigation for archive and taxonomy pages.
 *
 * @since 0.1.0
 *
 * @see the_posts_navigation()
 * @link https://developer.wordpress.org/reference/functions/the_posts_navigation/
 *
 * @param callback $args The default array for `the_posts_naviation()`.
 * @return callback A filtered array for `the_posts_naviation()`, if applicable.

 */
if ( ! function_exists( 'action_mm_paragraphs_navigation' ) ) {

	function action_mm_paragraphs_navigation() {

		$args = the_posts_pagination( array(
			'prev_text'          => __( 'Previous page', 'manualmaker' ),
			'next_text'          => __( 'Next page', 'manualmaker' ),
			'before_page_number' => '<span class="meta-nav screen-reader-text">' .
										__( 'Page', 'manualmaker' ) .
									' </span>',
			)
		);

		if( is_post_type_archive( 'paragraph' )
			|| is_tax( array( 'section', 'index_locator' ) )
			|| is_search()
		) {

			/**
			 * Allows plugins and themes to override array parameters.
			 *
			 * @since 0.1.0
			 *
			 * @link https://developer.wordpress.org/plugins/hooks/custom-hooks/
			 * @link https://make.wordpress.org/docs/plugin-developer-handbook/hooks/creating-custom-hooks/
			 */
			return apply_filters( 'apply_to_action_mm_paragraphs_navigation', $args );

		} // if

	} // action_mm_paragraphs_navigation()

} // if ( ! function_exists() )

# ======= WP_Query ======= #

/**
 * Sets a custom order for paragraphs on archive and taxonomy pages.
 *
 * Orders paragraphs so that they appear in numerical order
 * (or any order set by the 'order' field in the 'page_attributes' meta box),
 * and subparagraphs appear beneath their respective parents.
 *
 * @since 0.1.0
 * @see pre_get_posts()
 * @link https://developer.wordpress.org/reference/hooks/pre_get_posts/
 */

function action_mm_order_paragraphs ( $query ) {

	if ( ! is_admin()
		&& ( is_post_type_archive( 'paragraph' )
		|| is_tax( array( 'section', 'index_locator' ) ) )
		&& $query->is_main_query()
	) {

	$query->set( 'post_type', 'paragraph' );
	$query->set( 'order', 'ASC' );
	$query->set( 'orderby', array( 'menu_order', 'parent' ) );

	return $query;

	} // if

} // action_mm_order_paragraphs()
